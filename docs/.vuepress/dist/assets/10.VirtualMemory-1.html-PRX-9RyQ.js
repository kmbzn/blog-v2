import{_ as s,c as l,a as e,o as n}from"./app-CTekxecS.js";const i={};function t(p,a){return n(),l("div",null,a[0]||(a[0]=[e(`<h1 id="_10-virtual-memory-1" tabindex="-1"><a class="header-anchor" href="#_10-virtual-memory-1"><span>10. Virtual Memory(1)</span></a></h1><h2 id="size-of-a-logical-address-space" tabindex="-1"><a class="header-anchor" href="#size-of-a-logical-address-space"><span>Size of a Logical Address Space</span></a></h2><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">[stack]</span>
<span class="line">   ↑</span>
<span class="line">[heap]</span>
<span class="line"></span>
<span class="line">[data]</span>
<span class="line"></span>
<span class="line">[text]</span>
<span class="line">   ↑</span>
<span class="line">   0</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>32비트 주소의 경우, 최대 주소 공간:<p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msup><mn>2</mn><mn>32</mn></msup><mo>−</mo><mn>1</mn><mo>⇒</mo><mn>4</mn><mtext>GB</mtext></mrow><annotation encoding="application/x-tex">2^{32} - 1 \\Rightarrow 4 \\text{GB} </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9474em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">32</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">⇒</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord">4</span><span class="mord text"><span class="mord">GB</span></span></span></span></span></span></p><ul><li>각 프로세스당 최대 4GB 논리 주소 공간</li><li>이 중 많은 부분이 실제로는 사용되지 않음</li></ul></li></ul><h2 id="background" tabindex="-1"><a class="header-anchor" href="#background"><span>Background</span></a></h2><ul><li><p>가상 메모리: 논리 메모리와 물리 메모리를 분리하는 구조</p></li><li><p>장점:</p><ul><li>프로그램의 일부분만 메모리에 있어도 실행 가능</li><li>논리 주소 공간은 물리 주소 공간보다 훨씬 클 수 있음</li><li>여러 프로세스가 주소 공간 공유 가능</li><li>프로세스 생성을 더 효율적으로 수행 가능</li><li>페이지를 스왑인/스왑아웃 할 수 있어야 함</li></ul></li><li><p>구현 방식:</p><ul><li>Demand paging</li><li>Demand segmentation</li></ul></li></ul><h2 id="virtual-memory-larger-than-physical-memory" tabindex="-1"><a class="header-anchor" href="#virtual-memory-larger-than-physical-memory"><span>Virtual Memory Larger than Physical Memory</span></a></h2><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">virtual memory:</span>
<span class="line">  page 0</span>
<span class="line">  page 1</span>
<span class="line">  page 2</span>
<span class="line">  ...</span>
<span class="line">  page n</span>
<span class="line"></span>
<span class="line">→ memory map → physical memory 일부만 유지</span>
<span class="line">→ 나머지는 secondary storage(디스크 등)에 저장</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="demand-paging" tabindex="-1"><a class="header-anchor" href="#demand-paging"><span>Demand Paging</span></a></h2><ul><li><p>페이지가 <strong>필요할 때만</strong> 메모리에 불러옴</p><ul><li>I/O 감소</li><li>메모리 절약</li><li>반응 속도 향상</li><li>사용자 수 증가</li></ul></li><li><p>페이지가 필요한 경우:</p><ul><li>잘못된 참조 → abort</li><li>메모리에 없으면 → 불러오기</li></ul></li><li><p><strong>Lazy swapper</strong>:</p><ul><li>필요한 순간까지 페이지를 불러오지 않음</li><li>이 기능을 수행하는 모듈을 <strong>pager</strong>라고 부름</li></ul></li></ul><h2 id="valid-invalid-bit" tabindex="-1"><a class="header-anchor" href="#valid-invalid-bit"><span>Valid-Invalid Bit</span></a></h2><ul><li><p>각 페이지 테이블 항목에는 valid-invalid 비트가 있음</p></li><li><p><strong>Valid (V)</strong>: 메모리에 있음</p></li><li><p><strong>Invalid (I)</strong>:</p><ul><li><p>해당 페이지가 프로세스 주소 공간에 없음 (illegal)</p></li><li><p>디스크에서 아직 로딩되지 않음 (not-in-memory)</p></li><li><p>디스크에서는 유효하지만 메모리에는 없음 (obsolete)</p></li><li><p>예: 항공 예약 시스템</p><ul><li>하나의 전역 디스크 + 여러 컴퓨터/지점</li></ul></li></ul></li><li><p>모든 항목은 초기에는 invalid 상태로 설정</p></li><li><p>주소 변환 중, invalid이면 ⇒ <strong>page fault</strong></p></li></ul><h2 id="page-table-when-some-pages-are-not-in-main-memory" tabindex="-1"><a class="header-anchor" href="#page-table-when-some-pages-are-not-in-main-memory"><span>Page Table when Some Pages are not in Main Memory</span></a></h2><ul><li>일부 페이지가 메모리에 없을 경우: <ul><li>page table에는 valid-invalid 비트가 존재</li><li>물리 메모리에 없는 페이지는 디스크에 저장됨</li><li>접근 시 <strong>page fault</strong> 발생</li></ul></li></ul><h2 id="page-fault" tabindex="-1"><a class="header-anchor" href="#page-fault"><span>Page Fault</span></a></h2><ul><li><p>유효하지 않은 페이지 접근 → MMU가 trap 발생 → <strong>page fault trap</strong></p></li><li><p>Trap handler는 OS 내부에 구현되어 있음</p></li><li><p>OS가 page fault를 처리하는 순서:</p><ol><li>OS가 다른 테이블을 조회하여 원인을 결정 <ul><li>illegal reference? bad address? protection violation?</li><li>메모리에 없는 경우 → 계속 진행</li></ul></li><li><strong>빈 프레임 확보</strong><ul><li>없으면 교체 (replacement)</li></ul></li><li><strong>디스크에서 페이지를 읽어 옴</strong><ul><li>디스크 I/O 완료까지 프로세스는 wait 상태</li><li>완료 후 page table 갱신 (frame #, valid bit)</li><li>프로세스를 Ready 큐에 넣고 dispatch</li></ul></li><li>페이지 fault 처리 완료 → 프로세스 재할당</li><li><strong>fault가 발생했던 명령 재실행</strong></li></ol></li></ul><h2 id="steps-in-handling-a-page-fault" tabindex="-1"><a class="header-anchor" href="#steps-in-handling-a-page-fault"><span>Steps in Handling a Page Fault</span></a></h2><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">프로세스가 페이지 참조</span>
<span class="line">        ↓</span>
<span class="line">해당 페이지가 디스크에만 존재 → trap 발생</span>
<span class="line">        ↓</span>
<span class="line">운영체제가 페이지 테이블과 free frame 조회</span>
<span class="line">        ↓</span>
<span class="line">디스크에서 해당 페이지를 메모리로 불러옴 (bring in)</span>
<span class="line">        ↓</span>
<span class="line">page table 갱신</span>
<span class="line">        ↓</span>
<span class="line">명령 재시작</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="difficulties-in-actual-hw-design" tabindex="-1"><a class="header-anchor" href="#difficulties-in-actual-hw-design"><span>Difficulties in actual HW design</span></a></h2><ul><li><p>언제 page fault가 발생하는가?</p><ol><li>명령어 fetch 중: 문제 없음</li><li>피연산자 fetch 중: instruction fetch → decode → operand fetch 중 재시작 필요</li><li><strong>최악의 경우</strong>: 명령어가 여러 위치를 갱신할 때 <ul><li>예: block copy 명령어<div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">copy count from_address to_address</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>to_address가 두 블록에 걸쳐 있을 경우</li><li>두 번째 블록 접근 중 fault 발생하면 이전 작업 <strong>Undo</strong> 필요</li></ul></li></ul></li></ol></li><li><p>해결을 위해 임시 주소/값 저장을 위한 <strong>하드웨어 지원 필요</strong></p></li></ul><h2 id="performance-of-demand-paging" tabindex="-1"><a class="header-anchor" href="#performance-of-demand-paging"><span>Performance of Demand Paging</span></a></h2><ul><li><p>페이지 폴트 확률 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0</mn><mo>≤</mo><mi>p</mi><mo>≤</mo><mn>1.0</mn></mrow><annotation encoding="application/x-tex">0 \\leq p \\leq 1.0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7804em;vertical-align:-0.136em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8304em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1.0</span></span></span></span></p><ul><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">p = 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span></span></span></span> → page fault 없음</li><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">p = 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span> → 모든 참조가 fault</li></ul></li><li><p><strong>유효 접근 시간 (Effective Access Time, EAT)</strong> 계산:</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>E</mi><mi>A</mi><mi>T</mi><mo>=</mo><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mi>p</mi><mo stretchy="false">)</mo><mo>×</mo><mtext>memory access time</mtext><mo>+</mo><mi>p</mi><mo>×</mo><mo stretchy="false">(</mo><mtext>page fault overhead</mtext><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">EAT = (1 - p) \\times \\text{memory access time} + p \\times (\\text{page fault overhead}) </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">p</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8623em;vertical-align:-0.1944em;"></span><span class="mord text"><span class="mord">memory access time</span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7778em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord text"><span class="mord">page fault overhead</span></span><span class="mclose">)</span></span></span></span></span></p></li><li><p>예시:</p><ul><li>메모리 접근 시간 = 200ns</li><li>평균 page fault 처리 시간 = 8ms = 8,000,000ns</li><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi><mo>=</mo><mfrac><mn>1</mn><mn>1000</mn></mfrac></mrow><annotation encoding="application/x-tex">p = \\frac{1}{1000}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.1901em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8451em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1000</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>일 때:<p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>E</mi><mi>A</mi><mi>T</mi><mo>=</mo><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mfrac><mn>1</mn><mn>1000</mn></mfrac><mo stretchy="false">)</mo><mo>×</mo><mn>200</mn><mo>+</mo><mfrac><mn>1</mn><mn>1000</mn></mfrac><mo>×</mo><mn>8</mn><mo separator="true">,</mo><mn>000</mn><mo separator="true">,</mo><mn>000</mn><mo>=</mo><mn>8.2</mn><mtext> </mtext><mi>μ</mi><mi>s</mi></mrow><annotation encoding="application/x-tex">EAT = (1 - \\frac{1}{1000}) \\times 200 + \\frac{1}{1000} \\times 8,000,000 = 8.2~\\mu s </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:2.0074em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1000</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">200</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:2.0074em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1000</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8389em;vertical-align:-0.1944em;"></span><span class="mord">8</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">000</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">000</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8389em;vertical-align:-0.1944em;"></span><span class="mord">8.2</span><span class="mspace nobreak"> </span><span class="mord mathnormal">μ</span><span class="mord mathnormal">s</span></span></span></span></span></p> → <strong>속도 저하 약 40배</strong></li></ul></li><li><p><strong>순수한 demand paging</strong>:</p><ul><li>참조 전까지 swap-in 하지 않음</li><li>시작 시 아무 페이지도 메모리에 없음</li></ul></li><li><p><strong>참조의 지역성 (Locality of reference)</strong>:</p><ul><li>거의 모든 workload에서 나타남</li><li>일정 시간 동안 특정 소수 페이지만 집중적으로 참조</li><li>이 특성 덕분에 demand paging이 <strong>실용적</strong></li></ul></li></ul><h2 id="what-happens-if-there-is-no-free-frame" tabindex="-1"><a class="header-anchor" href="#what-happens-if-there-is-no-free-frame"><span>What happens if there is no free frame?</span></a></h2><ul><li><p><strong>Page replacement</strong></p><ul><li>page-fault 처리 루틴을 수정하여 프레임이 부족할 때 page replacement 수행</li><li><strong>modify (dirty) bit</strong>를 사용하여 디스크 전송 비용 최소화 (수정된 페이지만 디스크로 swap-out)</li><li>논리 메모리와 물리 메모리의 분리를 완성 <ul><li>더 작은 물리 메모리로 큰 가상 메모리 제공 가능</li><li>같은 페이지가 실행 중 여러 번 메모리에 올라올 수 있음</li></ul></li></ul></li><li><p><strong>Page replacement algorithm</strong></p><ul><li>victim page(교체 대상 페이지)를 선택하는 알고리즘</li><li><strong>목표: page fault 수 최소화</strong></li></ul></li></ul><h2 id="basic-page-replacement" tabindex="-1"><a class="header-anchor" href="#basic-page-replacement"><span>Basic Page Replacement</span></a></h2><ol><li>디스크에서 필요한 페이지 위치 찾기</li><li><strong>빈 프레임 찾기</strong><ul><li>빈 프레임이 있으면 → 그대로 사용</li><li>없으면 → page replacement 알고리즘으로 <strong>victim frame</strong> 선택</li></ul></li><li>디스크에서 해당 페이지를 victim frame에 불러오고, page table과 free frame table 업데이트</li><li>중단된 프로세스 재시작</li></ol><h2 id="page-replacement-algorithms" tabindex="-1"><a class="header-anchor" href="#page-replacement-algorithms"><span>Page-Replacement Algorithms</span></a></h2><ul><li><p><strong>최소 page-fault 비율</strong>을 갖는 알고리즘이 이상적</p></li><li><p>알고리즘을 특정 <strong>reference string</strong>에 대해 실행하여 성능 평가</p></li><li><p>예시 reference string:</p></li></ul><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">1, 2, 3, 4, 1, 2, 5, 1, 2, 3, 4, 5</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="graph-of-page-faults-vs-the-number-of-frames" tabindex="-1"><a class="header-anchor" href="#graph-of-page-faults-vs-the-number-of-frames"><span>Graph of Page Faults vs. the Number of Frames</span></a></h2><ul><li>프레임 수가 증가하면 page fault 수는 감소</li><li>단, 항상 그런 것은 아님 (→ Belady’s anomaly)</li></ul><h2 id="first-in-first-out-fifo-algorithm" tabindex="-1"><a class="header-anchor" href="#first-in-first-out-fifo-algorithm"><span>First-In-First-Out (FIFO) Algorithm</span></a></h2><ul><li>Reference string:</li></ul><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">1, 2, 3, 4, 1, 2, 5, 1, 2, 3, 4, 5</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li><strong>3 프레임</strong>일 때:</li></ul><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">1 2 3  →  page fault</span>
<span class="line">4      →  page fault, replace 1</span>
<span class="line">1      →  page fault, replace 2</span>
<span class="line">2      →  page fault, replace 3</span>
<span class="line">5      →  page fault, replace 4</span>
<span class="line">1 2 3 4 5 → 총 9 page faults</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>4 프레임</strong>일 때:</li></ul><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">page fault 더 많아짐 → 10</span>
<span class="line">→ Belady’s Anomaly (프레임이 늘었는데도 page fault가 증가)</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="optimal-algorithm" tabindex="-1"><a class="header-anchor" href="#optimal-algorithm"><span>Optimal Algorithm</span></a></h2><ul><li><p><strong>가장 오랫동안 사용되지 않을 페이지</strong>를 교체</p></li><li><p>예시:</p></li></ul><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">Reference: 1, 2, 3, 4, 1, 2, 5, 1, 2, 3, 4, 5</span>
<span class="line">4개의 프레임 사용 시 → 총 6 page faults</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>실제 시스템에서 적용 불가능 (미래 참조를 알 수 없기 때문)</li><li>알고리즘 성능 평가의 기준으로 사용됨</li></ul><h2 id="least-recently-used-lru-algorithm" tabindex="-1"><a class="header-anchor" href="#least-recently-used-lru-algorithm"><span>Least Recently Used (LRU) Algorithm</span></a></h2><ul><li>Reference string:</li></ul><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">1, 2, 3, 4, 1, 2, 5, 1, 2, 3, 4, 5</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li><strong>LRU 문제점</strong>: <ul><li>LRU를 그대로 구현하려면: <ul><li>각 페이지에 타임스탬프 필요 → page table traffic 증가</li><li>가장 오래된 타임스탬프를 찾는 연산 필요</li><li>커널에 적용하기에는 공간/시간 오버헤드가 큼</li></ul></li><li>→ <strong>근사 모델</strong> 필요</li></ul></li></ul><h2 id="lru-implementation-algorithms" tabindex="-1"><a class="header-anchor" href="#lru-implementation-algorithms"><span>LRU Implementation Algorithms</span></a></h2><ul><li><p><strong>카운터 기반 구현</strong>:</p><ul><li>각 페이지마다 카운터 유지</li><li>CPU가 메모리 참조마다 카운터 증가</li><li>페이지 참조 시 현재 카운터 값을 저장</li><li>교체 시 가장 작은 카운터 값을 가진 페이지를 선택</li><li>단점: <ul><li>매 접근 시 카운터 접근 비용</li><li>교체 시 전체 검색 필요</li><li>오버헤드 큼</li></ul></li></ul></li><li><p><strong>스택 기반 구현</strong>:</p><ul><li>페이지 번호를 <strong>이중 연결 리스트(stack)</strong> 형태로 유지</li><li>참조 시 해당 페이지를 top으로 이동</li><li>이동 시 포인터 6개 수정 필요</li><li>교체 시 검색 불필요</li></ul></li></ul><h2 id="use-of-a-stack-to-record-the-most-recent-page-references" tabindex="-1"><a class="header-anchor" href="#use-of-a-stack-to-record-the-most-recent-page-references"><span>Use of a Stack to Record the Most Recent Page References</span></a></h2><ul><li>Reference string:</li></ul><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">4 7 0 7 1 0 1 2 7 b</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>스택 상태 변화:</li></ul><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">stack before:</span>
<span class="line">top → 2</span>
<span class="line">       1</span>
<span class="line">       0</span>
<span class="line">       4</span>
<span class="line"></span>
<span class="line">stack after:</span>
<span class="line">top → 7</span>
<span class="line">       2</span>
<span class="line">       1</span>
<span class="line">       0</span>
<span class="line">       4</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>최근 사용된 페이지가 top에 위치</li></ul><h2 id="lru-approximation-algorithms" tabindex="-1"><a class="header-anchor" href="#lru-approximation-algorithms"><span>LRU Approximation Algorithms</span></a></h2><ul><li><p><strong>Reference bit 방식</strong>:</p><ul><li>각 페이지에 1비트 레퍼런스 비트 할당 (초기값 0)</li><li>페이지가 참조되면 비트 = 1</li><li>교체 시 reference bit가 0인 페이지를 선택</li></ul></li><li><p><strong>추가 참조 비트 방식</strong>:</p><ul><li>각 페이지에 8비트 할당</li><li>일정 주기마다 reference bit를 가장 높은 비트로 시프트</li><li>나머지 비트는 오른쪽으로 쉬프트 (하위 비트 삭제)</li><li>예: <ul><li><code>00000000</code>: 참조 안 됨</li><li><code>10101010</code>: 2주기마다 참조됨</li></ul></li></ul></li></ul><h2 id="lru-approximation-algorithms-계속" tabindex="-1"><a class="header-anchor" href="#lru-approximation-algorithms-계속"><span>LRU Approximation Algorithms (계속)</span></a></h2><ul><li><p><strong>Second-Chance (Clock) 알고리즘</strong></p><ul><li>reference bit 사용</li><li>원형 큐로 페이지 유지</li><li>포인터가 reference bit가 0인 페이지를 찾을 때까지 이동</li><li>reference bit가 1이면 0으로 리셋하고 다음 페이지로 이동</li><li>사실상 FIFO와 유사하지만 참조된 페이지에 기회 한 번 더 줌</li></ul></li><li><p>특징:</p><ul><li>포인터는 순환적으로 회전</li><li>1이면 bit만 0으로 바꾸고 지나침</li><li>0이면 victim으로 선택</li></ul></li><li><p><strong>향상된 Second-Chance 알고리즘</strong></p><ul><li>Reference bit + Modify bit 조합</li><li>우선순위: <ul><li>Not-Referenced + Not-Modified: 최우선으로 교체</li><li>Referenced + Modified: 마지막 우선순위</li></ul></li></ul></li></ul><h2 id="second-chance-clock-page-replacement-algorithm" tabindex="-1"><a class="header-anchor" href="#second-chance-clock-page-replacement-algorithm"><span>Second-Chance (Clock) Page-Replacement Algorithm</span></a></h2><ul><li>시각적 예시:</li></ul><p>(a)</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">reference bit: 1 1 0 1 0</span>
<span class="line">next victim → 찾을 때까지 한 칸씩 이동하며 검사</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>(b)</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">reference bit가 1인 경우는 무시하고 다음으로 진행</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>한 바퀴 돌면서 적절한 교체 대상 선택</li></ul><h2 id="counting-algorithms" tabindex="-1"><a class="header-anchor" href="#counting-algorithms"><span>Counting Algorithms</span></a></h2><ul><li><p>각 페이지에 대해 <strong>참조 횟수 카운터</strong>를 유지함</p></li><li><p><strong>LFU (Least Frequently Used) 알고리즘</strong></p><ul><li>참조 횟수가 가장 적은 페이지를 교체</li></ul></li><li><p><strong>MFU (Most Frequently Used) 알고리즘</strong></p><ul><li>가장 적게 참조된 페이지는 <strong>최근에 불러온 후 아직 사용되지 않았을 가능성</strong>이 높다는 가정에 기반하여,</li><li>참조 횟수가 가장 많은 페이지를 유지하고, 가장 적은 페이지를 유지하지 않음</li></ul></li></ul><hr><h1 id="virtual-memory-page-replacement-교수님-강의-요약" tabindex="-1"><a class="header-anchor" href="#virtual-memory-page-replacement-교수님-강의-요약"><span>Virtual Memory &amp; Page Replacement - 교수님 강의 요약</span></a></h1><h2 id="frame-allocation과-priority" tabindex="-1"><a class="header-anchor" href="#frame-allocation과-priority"><span>Frame Allocation과 Priority</span></a></h2><ul><li>각 프로세스에 프레임 수를 어떻게 할당할지는 OS 정책에 달려 있음</li><li>우선순위 기반 정책(priority allocation): 우선순위가 높은 프로세스에 프레임을 더 많이 할당 <ul><li>하지만 우선순위가 높다고 무조건 많이 줄 필요는 없음</li></ul></li><li>중요한 목표는 <strong>page fault</strong>를 줄이는 것 <ul><li>자주 접근하는 페이지들을 식별해서 해당 프레임 수만큼만 할당해주는 것이 핵심</li></ul></li></ul><h2 id="working-set-model" tabindex="-1"><a class="header-anchor" href="#working-set-model"><span>Working Set Model</span></a></h2><ul><li>프로세스가 자주 접근하는 페이지들의 집합을 <strong>working set</strong>이라 부름</li><li>일정 시간 동안 참조된 페이지들의 집합을 기준으로 판단</li><li>이 working set을 메모리에 유지해야 page fault가 줄어듦</li><li>만약 전체 working set을 담을 수 없다면 <strong>suspend</strong>를 고려해야 함</li></ul><h2 id="thrashing" tabindex="-1"><a class="header-anchor" href="#thrashing"><span>Thrashing</span></a></h2><ul><li>자주 접근하는 페이지들이 메모리에 올라가지 못해 지속적으로 page fault 발생</li><li>I/O 대기 시간이 급격히 증가하며 CPU utilization은 감소</li><li>새로운 프로세스를 실행시키면 기존 프로세스의 프레임을 빼앗아야 해서 악화됨</li><li>해결 방법: <ul><li>working set이 메모리에 항상 유지되도록 보장</li><li>또는 일부 프로세스를 suspend</li></ul></li></ul><h2 id="locality" tabindex="-1"><a class="header-anchor" href="#locality"><span>Locality</span></a></h2><ul><li>시간 지역성(temporal locality): 최근 참조한 페이지는 다시 참조할 확률 높음</li><li>공간 지역성(spatial locality): 참조한 페이지 근처의 페이지도 자주 참조됨</li></ul><h2 id="page-fault-frequency-pff" tabindex="-1"><a class="header-anchor" href="#page-fault-frequency-pff"><span>Page Fault Frequency (PFF)</span></a></h2><ul><li>page fault의 빈도를 기준으로 프레임 재분배</li><li>상한선을 넘으면 프레임 추가, 하한선보다 낮으면 프레임 회수</li><li>working set보다 정확도는 낮지만 오버헤드가 훨씬 낮음</li></ul><h1 id="global-vs-local-replacement" tabindex="-1"><a class="header-anchor" href="#global-vs-local-replacement"><span>Global vs Local Replacement</span></a></h1><ul><li>Global replacement: 다른 프로세스의 프레임도 빼앗아올 수 있음</li><li>Local replacement: 자신에게 할당된 프레임만 교체 가능</li><li>Local replacement만 사용할 경우 thrashing 방지 어려움</li></ul><h1 id="copy-on-write" tabindex="-1"><a class="header-anchor" href="#copy-on-write"><span>Copy-On-Write</span></a></h1><ul><li>부모와 자식 프로세스가 동일한 페이지를 공유</li><li>write가 발생할 경우 해당 페이지를 복사하여 각각 소유하도록 함</li><li>xv6에서는 <code>rsw</code> 비트를 활용하여 COW 여부 표시</li><li>page fault를 통해 write 시점에 새로 할당</li></ul><h1 id="memory-mapped-files" tabindex="-1"><a class="header-anchor" href="#memory-mapped-files"><span>Memory-Mapped Files</span></a></h1><ul><li>파일 내용을 메모리 주소에 직접 매핑</li><li>I/O 대신 메모리 연산으로 간접 접근 가능</li><li>성능 이점: <ul><li>첫 접근 시 page fault를 통해 메모리에 로딩</li><li>이후 연산은 메모리 접근으로 수행되어 빠름</li><li>디스크 I/O 횟수 감소</li></ul></li></ul><h1 id="page-size-vs-tlb-reach" tabindex="-1"><a class="header-anchor" href="#page-size-vs-tlb-reach"><span>Page Size vs TLB Reach</span></a></h1><ul><li>TLB Reach: TLB가 커버할 수 있는 전체 메모리 공간</li><li>page size가 커지면 TLB Reach 증가</li><li>다단계 페이지 테이블의 depth 감소</li><li>단점: <ul><li>내부 단편화(internal fragmentation)</li><li>불필요한 데이터까지 로딩될 수 있음</li></ul></li><li>장점: <ul><li>Disk I/O 효율 증가</li><li>저장장치 접근 성능 향상</li></ul></li></ul><h1 id="xv6-disk-layer-buffer-cache-logging" tabindex="-1"><a class="header-anchor" href="#xv6-disk-layer-buffer-cache-logging"><span>xv6 Disk Layer, Buffer Cache, Logging</span></a></h1><h2 id="구조" tabindex="-1"><a class="header-anchor" href="#구조"><span>구조</span></a></h2><ul><li>xv6의 파일 시스템 계층: 7단계 <ul><li>boot sector</li><li>superblock</li><li>log</li><li>bitmap</li><li>inode</li><li>data block</li><li>buffer cache</li></ul></li></ul><h2 id="buffer-cache" tabindex="-1"><a class="header-anchor" href="#buffer-cache"><span>Buffer Cache</span></a></h2><ul><li>disk block을 메모리에 임시 저장</li><li>구조체로 관리됨 (<code>bcache</code>)</li><li>LRU 방식의 리스트로 관리</li><li><code>binit</code>, <code>bread</code>, <code>bget</code>, <code>brelease</code> 함수 사용</li></ul><h2 id="logging" tabindex="-1"><a class="header-anchor" href="#logging"><span>Logging</span></a></h2><ul><li>log를 먼저 작성한 뒤 commit</li><li>crash 대비 복구 가능</li><li>commit 시: <ul><li>dirty block들을 log에 먼저 작성</li><li>이후 실제 위치에 덮어씀</li><li>log header 지움</li></ul></li></ul><h2 id="transaction" tabindex="-1"><a class="header-anchor" href="#transaction"><span>Transaction</span></a></h2><ul><li>log에 쓸 작업 단위</li><li><code>begin_op</code> → 작업 수행 → <code>end_op</code> → <code>commit</code></li><li>commit 지점 기준으로 복구 여부 결정</li><li>group commit 방식으로 효율성 확보</li></ul><hr><h1 id="project-3-과제-안내" tabindex="-1"><a class="header-anchor" href="#project-3-과제-안내"><span>Project 3 과제 안내</span></a></h1><h2 id="_1-copy-on-write" tabindex="-1"><a class="header-anchor" href="#_1-copy-on-write"><span>1. Copy-On-Write</span></a></h2><ul><li><code>fork()</code> 시 페이지 복사 대신 공유</li><li>write 발생 시 page fault를 통해 개별 복사</li><li><code>rsw</code> 비트로 COW 표시</li><li>reference count 관리 필요</li></ul><h2 id="_2-large-file-support" tabindex="-1"><a class="header-anchor" href="#_2-large-file-support"><span>2. Large File Support</span></a></h2><ul><li>기존 12 direct block → 11 direct + 1 double indirect block</li><li>최대 64MB 파일 지원</li><li><code>maxfile</code>, <code>NDIRECT</code>, <code>NINDIRECT</code> 수정</li><li><code>bmap</code>, <code>itrunc</code>, <code>create</code> 등 함수 수정</li></ul><h2 id="_3-symbolic-link" tabindex="-1"><a class="header-anchor" href="#_3-symbolic-link"><span>3. Symbolic Link</span></a></h2><ul><li>파일의 경로를 저장하는 링크</li><li><code>T_SYMLINK</code> 타입 추가</li><li><code>symlink</code> system call 구현</li><li>open 시 경로 참조</li><li>무한 루프 방지를 위한 cycle check 필요</li><li>실제 대상 파일이 없어도 링크 생성 가능</li></ul><h1 id="기타-이슈" tabindex="-1"><a class="header-anchor" href="#기타-이슈"><span>기타 이슈</span></a></h1><h2 id="언어에-따라-page-fault-수-차이" tabindex="-1"><a class="header-anchor" href="#언어에-따라-page-fault-수-차이"><span>언어에 따라 page fault 수 차이</span></a></h2><ul><li>C는 row-major</li><li>Fortran은 column-major</li><li>접근 순서에 따라 다른 페이지에 접근 → page fault 차이</li></ul><h2 id="tlb" tabindex="-1"><a class="header-anchor" href="#tlb"><span>TLB</span></a></h2><ul><li>TLB는 address 변환을 빠르게 수행</li><li>TLB Reach = TLB entry 수 × page size</li><li>page size가 클수록 TLB Reach 증가</li></ul>`,109)]))}const c=s(i,[["render",t]]),m=JSON.parse('{"path":"/operating-system/10.VirtualMemory-1.html","title":"10. Virtual Memory(1)","lang":"ko-KR","frontmatter":{},"git":{"updatedTime":1749486934000,"contributors":[{"name":"김병준","username":"","email":"kmbzn24@hanyang.ac.kr","commits":1},{"name":"kmbzn","username":"kmbzn","email":"kmbzn24@gmail.com","commits":1,"url":"https://github.com/kmbzn"}],"changelog":[{"hash":"0bcd31829c652a9bbf03564b05b0c23bda2af518","time":1749486934000,"email":"kmbzn24@gmail.com","author":"kmbzn","message":"update 요약"},{"hash":"9cc5e2fcd767b8760696b0f75675d32b8332cae5","time":1748834610000,"email":"kmbzn24@hanyang.ac.kr","author":"김병준","message":"os virtualmemory"}]},"filePathRelative":"operating-system/10.VirtualMemory-1.md"}');export{c as comp,m as data};
