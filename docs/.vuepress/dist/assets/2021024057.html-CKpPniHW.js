import{_ as a,c as o,a as c,o as d}from"./app-CXa5lrE-.js";const n="/assets/erd--yFqqoNT.png",s="/assets/relation-Bl0ot8kZ.png",t={};function r(p,e){return d(),o("div",null,[...e[0]||(e[0]=[c('<h1 id="assignment-2-1-db-schema-design" tabindex="-1"><a class="header-anchor" href="#assignment-2-1-db-schema-design"><span>Assignment 2-1: DB Schema Design</span></a></h1><p>2021024057 김병준</p><h2 id="_1-설계-의도" tabindex="-1"><a class="header-anchor" href="#_1-설계-의도"><span>1. 설계 의도</span></a></h2><p>본 Database Schema는 도서관의 서적, 회원 관리, 대출/반납 시스템을 구현하는 것을 목표로 설계하였습니다.</p><p><strong>Normalization</strong>: 데이터의 중복을 최소화하고 일관성을 유지하기 위해 엔티티를 분리. &#39;서적&#39;의 추상적인 정보(제목, 저자 등)를 담는 <code>BOOK</code> 엔티티와 실제 물리적인 책 한 권 한 권을 의미하는 <code>BOOK_COPY</code> entity를 따로 분리하여 재고 및 대출의 상태를 명확하게 관리할 수 있도록 함.</p><p><strong>Scalability</strong>: 추후 새로운 기능이 추가되더라도 유연성 있게 확장할 수 있는 구조를 채택</p><p><strong>Integrity</strong>: 기본키(PK)와 외래키(FK)의 관계를 명확히 설정하여 각 데이터 간의 논리적 연결을 보장하고, 잘못된 데이터가 입력되거나 삭제되는 것을 방지</p><p><strong>관계의 명확성</strong>: &#39;서적&#39;과 &#39;카테고리&#39;의 다대다<code>(N:M)</code> 관계를 해결하기 위해 연결 테이블인 <code>BOOK_CAT</code>를 도입하여 관계를 명확하게 표현</p><h2 id="_2-entity-및-relation-설명" tabindex="-1"><a class="header-anchor" href="#_2-entity-및-relation-설명"><span>2. Entity 및 Relation 설명</span></a></h2><h3 id="entity-역할" tabindex="-1"><a class="header-anchor" href="#entity-역할"><span>Entity 역할</span></a></h3><h4 id="user-회원" tabindex="-1"><a class="header-anchor" href="#user-회원"><span><code>USER</code> (회원)</span></a></h4><p>시스템에 가입된 모든 사용자(일반 사용자, 관리자)의 정보를 저장</p><p>로그인, 권한 관리, 대출 자격 확인(연체 여부), 개인별 대출 기록 조회 등 회원과 관련된 모든 기능의 바탕이 됨 <code>user_type</code> 속성을 통해 일반 사용자와 관리자를 구분하고, 관리자의 경우에는 학번, <code>student_id</code>를 통해 접근 권한을 부여</p><h4 id="book-서적-정보" tabindex="-1"><a class="header-anchor" href="#book-서적-정보"><span><code>BOOK</code> (서적 정보)</span></a></h4><p>도서의 고유한 정보(제목, 저자, ISBN 등)를 저장<br> 동일한 책이 여러 권 있는 경우에도 이 table에는 한 번만 등록</p><p>서적 검색, 목록 조회, 큐레이팅 차트 집계 시 기준이 되는 &#39;정보&#39;의 역할<br> data duplicate를 방지하고 서적 정보를 일관되게 관리하는 역할</p><h4 id="book-copy-개별-서적" tabindex="-1"><a class="header-anchor" href="#book-copy-개별-서적"><span><code>BOOK_COPY</code> (개별 서적)</span></a></h4><p>실제 도서관이 보유한 물리적인 책 한 권 한 권을 의미<br> 각 copy는 고유 <code>ID</code>를 가지며, 어떤 <code>BOOK</code>에 해당하는지와 현재 상태(&#39;대출 가능&#39;, &#39;대출 중&#39; 등) 정보를 가짐</p><p>&#39;수량&#39;과 &#39;대출 가능 여부&#39;를 파악하고, 특정 책의 어떤 복사본이 대출되었는지 추적하기 위해 필요</p><h4 id="category-카테고리" tabindex="-1"><a class="header-anchor" href="#category-카테고리"><span><code>CATEGORY</code> (카테고리)</span></a></h4><p>&#39;소설&#39;, &#39;IT&#39;, &#39;자기계발&#39;과 같은 서적의 category 명칭을 저장</p><p>서적을 종류에 따라 분류하고, category별 검색, 정렬, 인기 chart 조회를 위해 필요</p><h4 id="rental-대출-기록" tabindex="-1"><a class="header-anchor" href="#rental-대출-기록"><span><code>RENTAL</code> (대출 기록)</span></a></h4><p>누가(<code>USER</code>), 어떤 책을(<code>BOOK_COPY</code>), 언제 빌리고 반납했는지에 대한 기록을 저장</p><p>사용자의 대출/반납 이력을 관리하고, 연체 여부 판단, 인기 서적 chart data 생성 등 대출과 관련된 핵심적인 기능을 수행</p><h4 id="book-cat-서적-카테고리-연결" tabindex="-1"><a class="header-anchor" href="#book-cat-서적-카테고리-연결"><span><code>BOOK_CAT</code> (서적-카테고리 연결)</span></a></h4><p><code>BOOK</code>과 <code>CATEGORY</code> 사이의 다대다<code>(N:M)</code> 관계를 구현하기 위한 중간 테이블</p><p>하나의 책이 여러 카테고리에 속할 수 있다고 했으므로, 이를 구현하기 위해 필요.<br> 이 테이블을 통해 특정 책이 어떤 카테고리(들)에 속하는지, 또는 특정 카테고리에 어떤 책(들)이 속하는지를 알 수 있음</p><h3 id="relation-설명" tabindex="-1"><a class="header-anchor" href="#relation-설명"><span>Relation 설명</span></a></h3><ul><li><p><code>USER</code>와 <code>RENTAL</code> <code>(1:N)</code>: 한 명의 회원은 여러 번의 대출 기록을 가질 수 있지만, 하나의 대출 기록은 한 명의 회원에게만 속함.</p></li><li><p><code>BOOK과</code> <code>BOOK_COPY</code> <code>(1:N)</code>: 하나의 서적 정보(<code>BOOK</code>)는 여러 개의 물리적 복사본(<code>BOOK_COPY</code>)을 가질 수 있음. e.g., &#39;데이터베이스 시스템&#39;이라는 책이 3권 있다면, <code>BOOK</code> 테이블에는 <code>1</code>개의 레코드가, <code>BOOK_COPY</code> 테이블에는 <code>3</code>개의 레코드가 생성</p></li><li><p><code>BOOK_COPY</code>와 <code>RENTAL</code> <code>(1:N)</code>: 하나의 복사본(<code>BOOK_COPY</code>)은 시간에 따라 여러 번 대출 가능 (하나의 특정 시점에는 1번만 대출 가능)</p></li><li><p><code>BOOK과</code> <code>CATEGORY</code> <code>(N:M)</code>: 하나의 책은 여러 카테고리에 속할 수 있고, 하나의 카테고리에는 여러 책이 포함될 수 있음.</p><ul><li><p><code>BOOK</code>과 <code>BOOK_CAT</code> <code>(1:N)</code></p></li><li><p><code>CATEGORY</code>와 <code>BOOK_CAT</code> <code>(1:N)</code></p></li></ul></li></ul><h2 id="_3-e-r-diagram" tabindex="-1"><a class="header-anchor" href="#_3-e-r-diagram"><span>3. E-R Diagram</span></a></h2><p><img src="'+n+'" alt="erd"></p><h2 id="_4-추가-기능-제안-3가지" tabindex="-1"><a class="header-anchor" href="#_4-추가-기능-제안-3가지"><span>4. 추가 기능 제안 (3가지)</span></a></h2><p>요구 명세 외에 도서관 시스템의 활용도를 높일 수 있는 3가지 기능을 추가로 schema에 반영했습니다.</p><h3 id="_4-1-통계-개인별-독서-통계-제공" tabindex="-1"><a class="header-anchor" href="#_4-1-통계-개인별-독서-통계-제공"><span>4.1. [통계] 개인별 독서 통계 제공</span></a></h3><p>사용자가 자신의 &#39;My Page&#39;에서 월별 독서량, 가장 많이 대출한 카테고리, 선호하는 저자 등의 통계를 확인할 수 있는 기능</p><p><code>USER</code>, <code>RENTAL</code>, <code>BOOK_COPY</code>, <code>BOOK</code>, <code>CATEGORY</code> table을 join하여 사용자의 대출 기록을 분석하여 구현 가능</p><h3 id="_4-2-통계-연체-현황-및-인기-도서-통계-관리자용" tabindex="-1"><a class="header-anchor" href="#_4-2-통계-연체-현황-및-인기-도서-통계-관리자용"><span>4.2. [통계] 연체 현황 및 인기 도서 통계 (관리자용)</span></a></h3><p>관리자 dashboard에서 전체 회원의 평균 연체일, 악성 연체자 목록, 연체가 자주 발생하는 서적 목록 등을 확인할 수 있는 기능</p><blockquote><p><em>이를 통해 도서 회수율을 높이는 정책을 수립할 수 있습니다.</em></p></blockquote><p><code>RENTAL</code> 테이블의 <code>due_date</code>(반납 예정일)와 <code>return_date</code>(실제 반납일)를 비교 분석하여 구현</p><h3 id="_4-3-서적-예약-기능" tabindex="-1"><a class="header-anchor" href="#_4-3-서적-예약-기능"><span>4.3. 서적 예약 기능</span></a></h3><p>원하는 책의 모든 복사본이 대출 중일 경우, 사용자가 해당 서적을 <strong>예약</strong>할 수 있는 기능<br> 책이 반납되면 예약 순서에 따라 사용자에게 알림 전송</p><blockquote><p>이를 위해 누가(<code>user_id</code>), 어떤 책을(<code>book_id</code>), 언제 예약했는지를 기록할 <code>RESERVATION</code>이라는 entity를 추가로 설계하였습니다.</p></blockquote><h2 id="_5-relation-schema" tabindex="-1"><a class="header-anchor" href="#_5-relation-schema"><span>5. Relation Schema</span></a></h2><p><img src="'+s+'" alt="relation"></p>',46)])])}const h=a(t,[["render",r]]),l=JSON.parse('{"path":"/db/2021024057.html","title":"Assignment 2-1: DB Schema Design","lang":"ko-KR","frontmatter":{},"git":{"updatedTime":1760634910000,"contributors":[{"name":"kmbzn","username":"kmbzn","email":"kmbzn24@gmail.com","commits":1,"url":"https://github.com/kmbzn"}],"changelog":[{"hash":"52b98e83152ee4a0cb490e9570a43501e96e6cfb","time":1760634910000,"email":"kmbzn24@gmail.com","author":"kmbzn","message":"update 1"}]},"filePathRelative":"db/2021024057.md"}');export{h as comp,l as data};
