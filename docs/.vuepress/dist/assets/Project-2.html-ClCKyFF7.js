import{_ as a,c as s,a as n,o as i}from"./app-Bm21SmUK.js";const l={};function o(t,e){return i(),s("div",null,e[0]||(e[0]=[n(`<h1 id="project-02-implementing-a-simple-kernel-level-thread" tabindex="-1"><a class="header-anchor" href="#project-02-implementing-a-simple-kernel-level-thread"><span>Project 02: Implementing a simple kernel-level thread</span></a></h1><p>Operating System</p><p>Due date<br> 2025. 05. 28. 23:59</p><h2 id="overview-개요" tabindex="-1"><a class="header-anchor" href="#overview-개요"><span>Overview 개요</span></a></h2><ul><li>이 프로젝트는 xv6 운영체제에서 커널 수준 스레드(kernel-level thread)의 단순화된 버전을 구현하는 것이다.</li><li>커널 수준 스레드는 하나의 프로세스가 여러 실행 컨텍스트(레지스터 상태, 스택)를 가지면서 주소 공간, 파일 descriptor 등의 자원을 공유하는 구조를 가능하게 한다.</li></ul><h2 id="key-implementation-requirements-핵심-구현-요구사항" tabindex="-1"><a class="header-anchor" href="#key-implementation-requirements-핵심-구현-요구사항"><span>Key Implementation Requirements 핵심 구현 요구사항</span></a></h2><ul><li>새로운 시스템 호출 <code>clone()</code>을 구현해 새로운 커널 수준 스레드를 생성</li><li>새로운 시스템 호출 <code>join()</code>을 구현해 커널 수준 스레드 종료 대기</li><li>사용자 수준 라이브러리 함수 <code>thread_create()</code>와 <code>thread_join()</code>을 작성하여 위 시스템 호출을 감쌈</li><li><code>kernel/proc.c</code> 내의 관련 함수들을 수정하여 커널 수준 스레드가 올바르게 동작하도록 할 것</li></ul><h2 id="special-characteristics-특성" tabindex="-1"><a class="header-anchor" href="#special-characteristics-특성"><span>Special Characteristics 특성</span></a></h2><p>이 xv6 커널 수준 스레드는 기존의 일반적인 스레드와 다음과 같은 차이점이 있다:</p><ul><li>각 스레드는 <code>clone</code> 시점에 부모 프로세스의 파일 descriptor 테이블을 복사하여 소유한다</li><li>메인 스레드가 <code>exit()</code>을 호출하면 모든 스레드가 종료된다 (프로세스 전체 종료)</li><li>어떤 스레드라도 <code>exit()</code>을 호출하면 해당 스레드는 종료된다</li><li><code>proc</code> 구조체를 스레드 제어 블록(TCB)로 재사용할 수 있다</li></ul><h2 id="api-details-system-calls-시스템-콜" tabindex="-1"><a class="header-anchor" href="#api-details-system-calls-시스템-콜"><span>API Details: System calls 시스템 콜</span></a></h2><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c"><pre><code><span class="line"><span class="token keyword">int</span> <span class="token function">clone</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">(</span><span class="token operator">*</span>fcn<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>arg1<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>arg2<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>stack<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>프로세스의 주소 공간을 공유하는 새로운 커널 수준 스레드를 생성</li><li><code>fcn</code>: 스레드가 실행할 함수</li><li><code>arg1</code>, <code>arg2</code>: 스레드에 전달될 인자</li><li><code>stack</code>: 스레드 사용자 공간의 스택 (페이지 정렬 필요, 최소 1 페이지 이상)</li><li>성공 시 새 스레드의 PID 반환, 실패 시 -1 반환</li></ul><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c"><pre><code><span class="line"><span class="token keyword">int</span> <span class="token function">join</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token operator">*</span>stack<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>자식 스레드가 종료될 때까지 대기</li><li><code>stack</code>: 종료된 스레드의 스택 주소를 저장할 포인터</li><li>성공 시 종료된 스레드의 PID 반환, 실패 시 -1 반환</li></ul><h2 id="api-details-user-library-functions-사용자-라이브러리-함수" tabindex="-1"><a class="header-anchor" href="#api-details-user-library-functions-사용자-라이브러리-함수"><span>API Details: User Library Functions 사용자 라이브러리 함수</span></a></h2><ul><li><code>user/thread.h</code>와 <code>user/thread.c</code>에 구현</li><li>Makefile에 <code>thread.o</code>를 추가하여 링크</li><li><code>int thread_create(void (*start_routine)(void *, void *), void *arg1, void *arg2);</code><ul><li>스택과 <code>clone</code>을 위한 메모리 할당</li><li>새 스레드의 PID 반환 또는 -1 반환</li></ul></li><li><code>int thread_join();</code><ul><li>종료될 스레드를 기다리고 해당 스택을 해제</li><li>종료된 스레드의 PID 반환 또는 -1 반환</li></ul></li></ul><h2 id="system-call-modifications-시스템-콜-수정" tabindex="-1"><a class="header-anchor" href="#system-call-modifications-시스템-콜-수정"><span>System Call Modifications 시스템 콜 수정</span></a></h2><ul><li><p>다음 시스템 호출들이 스레드와 함께 정상 작동하도록 보장해야 함:</p><ul><li><code>fork</code>: 스레드도 주소 공간을 복사해서 정상적으로 호출되어야 함</li><li><code>exec</code>: 모든 스레드를 정리하고 새 프로세스를 시작</li><li><code>sbrk</code>: 여러 스레드가 메모리를 안전하게 할당 가능해야 함</li><li><code>kill</code>: 종료되는 스레드가 모든 스레드를 함께 종료시켜야 함</li><li><code>sleep</code>: 호출한 스레드에만 영향을 미쳐야 함</li><li><code>pipe</code>: 모든 스레드가 화면에 출력할 수 있어야 함</li></ul></li></ul><h2 id="tips-for-development-개발을-위한-팁" tabindex="-1"><a class="header-anchor" href="#tips-for-development-개발을-위한-팁"><span>Tips for Development 개발을 위한 팁</span></a></h2><ul><li><p>기본 xv6 스케줄러(라운드 로빈)를 그대로 사용</p></li><li><p>xv6의 <code>fork</code>, <code>exec</code>, <code>exit</code>, <code>wait</code> 코드를 면밀히 분석</p></li><li><p>경쟁 조건 방지를 위해 적절한 잠금 사용</p></li><li><p>Resource 누수를 방지하기 위해 적절한 해제 및 메모리 관리 수행</p></li><li><p>Thread와 process의 차이를 <strong>명확히 이해할 것</strong></p><ul><li>어떤 자원이 공유되고 어떤 자원이 독립적인지 <strong>주의 깊게 구분</strong></li><li>이 프로젝트에서 제공되는 기본 코드는 이미 일부 변경된 코드이며, 그 변경 내용을 <strong>위키에 문서화</strong>해야 함</li></ul></li></ul><h2 id="wiki-위키" tabindex="-1"><a class="header-anchor" href="#wiki-위키"><span>Wiki 위키</span></a></h2><ul><li><strong>Design</strong>: 요구사항 충족을 위한 구현 접근 방식 설명</li><li><strong>Implementation</strong>: 주요 코드 수정 및 그 목적 설명</li><li><strong>Results</strong>: 구현 결과 증거 제시 (컴파일 로그, 실행 화면, 프로그램 설명 등)</li><li><strong>Troubleshooting</strong>: 문제 상황과 해결 과정 서술</li><li><strong>Additional content</strong>: 필요 시 관련 자료 포함 가능</li></ul><h2 id="evaluation-평가" tabindex="-1"><a class="header-anchor" href="#evaluation-평가"><span>Evaluation 평가</span></a></h2><ul><li><p><strong>Completeness</strong>: xv6 시스템이 사양에 맞게 정상 작동해야 함</p></li><li><p><strong>Wiki &amp; Comment Grading</strong>: 위키 문서화 <strong>품질</strong>도 평가에 반영됨. 최대한 상세히 작성할 것</p></li><li><p><strong>Deadline</strong>: 마감 기한 엄수. 마감 후에는 GitHub 쓰기 권한이 철회됨</p><ul><li><strong>공유하거나 복사하지 마시오!</strong></li></ul></li></ul><h2 id="submission-제출" tabindex="-1"><a class="header-anchor" href="#submission-제출"><span>Submission 제출</span></a></h2><ul><li>GitHub를 통해 코드와 위키를 제출 <ul><li>공지사항 참조하여 새 레포지토리 생성</li><li>레포지토리 이름은 <code>project02-[student ID]</code>로 설정</li><li>위키 파일 이름: <code>05_project02_[class number]_[student ID].pdf</code></li></ul></li><li>제출 마감일: <strong>2025년 5월 25일 23:59</strong><ul><li>마감일 이후 2025년 5월 26일 23:59까지 이메일 제출 가능. 단, 점수의 50%만 인정함.</li></ul></li></ul>`,27)]))}const r=a(l,[["render",o]]),d=JSON.parse('{"path":"/os/Project-2.html","title":"Project 02: Implementing a simple kernel-level thread","lang":"ko-KR","frontmatter":{},"git":{"updatedTime":1749897692000,"contributors":[{"name":"김병준","username":"","email":"kmbzn24@hanyang.ac.kr","commits":4}],"changelog":[{"hash":"7dfc10ae87be9ce0083cb39d24d30b15e77a0371","time":1749897692000,"email":"kmbzn24@hanyang.ac.kr","author":"김병준","message":"directory name change"},{"hash":"dbe1c41954e98f08833d8f4322d01722c506a8ff","time":1748101962000,"email":"kmbzn24@hanyang.ac.kr","author":"김병준","message":"add test code"},{"hash":"c3e7d23c80b12947b3223803e03c5ba44736e1f9","time":1748027703000,"email":"kmbzn24@hanyang.ac.kr","author":"김병준","message":"bug fix"},{"hash":"9461eff95217532807b27aee343d788c87a82af8","time":1747871687000,"email":"kmbzn24@hanyang.ac.kr","author":"김병준","message":"add operating-system"}]},"filePathRelative":"os/Project-2.md"}');export{r as comp,d as data};
